 10. Recap
    a. SELECT/LIMIT/DISTINCT
        SELECT selects data FROM a database.
        SELECT * selects all the columns.
        LIMIT limits the number of rows that come back in your results.
        DISTINCT returns unique values in a column.
    b. WHERE
        WHERE filters results based on a condition.
        Comparison operators: =, !=, <>, >, <, >=, <=.
    c. LIKE
        LIKE operator searches for a specific pattern.
    d. BETWEEN 
        BETWEEN operator matches values in a range.
    e. Aggregate Functions
        Aggregate functions operate on values across rows to perform mathematical calculations such as sum, average, counting, 
        and minimum/maximum values, as well as some non-mathematical operations.
    f. GROUP BY/ORDER BY
        GROUP BY groups rows with the same group-by-item expressions and computes aggregate functions for the resulting group.
        ORDER BY specifies an ordering of the rows of the result table from a SELECT list. Defaults to ascending order.
    g. Constraint
        A primary key is a column (or a set of columns) in a table that uniquely identifies each row.
        A foreign key is a column (or a set of columns) in one table that refers to the primary key of another table.
    h. Joins
        Inner Join
            An inner join pairs each row in one table with the matching row(s) in the other table.
        Outer Join
            An outer join lists all rows in the specified table, even if those rows have no match in the other table. 
            A right outer join lists all parts by vendor (regardless of vendor). */
            A full outer join lists all vendors and all parts. */
        Cross Join¶
            A cross join combines each row in the first table with each row in the second table, creating every possible 
            combination of rows (called a “Cartesian product”). Because most of the result rows contain parts of rows 
            that are not actually related, a cross join is rarely useful by itself. In fact, cross joins are usually the result of 
            accidentally omitting the join condition.

            The result of a cross join can be very large (and expensive). If the first table has N rows and the second table 
            has M rows, then the result is N x M rows. For example, if the first table has 100 rows and the second table 
            has 1000 rows, then the result set contains 100,000 rows.
        Natural Join
            A natural join is used when two tables contain columns that have the same name and in which the data in 
            those columns corresponds. In the partss and vendors tables shown above, both tables have columns 
            named “vendor_id”. A natural join implicitly constructs the ON clause: ON vendors.vendor_id = 
            parts.vendor_id.

            If two tables have multiple columns in common, then all the common columns are used in the ON clause. For 
            example, if you had two tables that each had columns named “vendor_id” and “"part_id"”, then a natural join would 
            construct the following ON clause:

                ON table2.vendor_id = table1.vendor_id AND table2.part_id = table1.part_id.

            The output of a natural join includes only one copy of each of the shared columns. For example, the following 
            query produces a natural join containing all columns in the two tables, except that it omits all but one copy of 
            the redundant project_ID column.

            A natural join can be combined with an outer join.

            A natural join cannot be combined with an ON clause because the join condition is already implied. However, 
            you can use a WHERE clause to filter the results of a natural join.
    i. UNION
        The UNION operator is a set operator used to combine the results of two or more SELECT statements into a single result set. 
        Removes duplicates.
    j. UNION ALL
        The UNION ALL operator is a set operator used to combine the results of two or more SELECT statements into a single result set. 
        Includes duplicates.
        It is generally faster than UNION because it avoids the overhead of duplicate checking. 